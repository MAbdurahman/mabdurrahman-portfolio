
/* =========================================
            _functions.scss
============================================ */
@use 'sass:math';
@use './variables' as var;

$default-min-bp: 320px;
$default-max-bp: 960px;

@function round($number, $decimals: 0) {
  $n: 1;
  @if $decimals > 0 {
    @for $i from 1 through $decimals {
      $n: $n * 10;
    }
  }
  @return math.div(math.round($number * $n), $n);
}

@function px-to-rem($px) {
  $rems: math.div($px, 16px) * 1rem;
  @return $rems;
}

@function set-fluid-typography($min-size, $max-size, $min-breakpoint: $default-min-bp, $max-breakpoint: $default-max-bp, $unit: vw) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: math.round($slope * 100);
  $intercept-rem: math.round(px-to-rem($min-size - $slope * $min-breakpoint));
  $min-size-rem: math.round(px-to-rem($min-size));
  $max-size-rem: math.round(px-to-rem($max-size));
  @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}

@function convert-to-rem($pixel) {
  @if (math.is-unitless($pixel)) {
    @return math.div($pixel, 16) + rem;

  } @else {
    @error 'Units are not allowed in convert-to-rem function!';

  }
}

@function convert-to-em($pixel) {
  @if (math.is-unitless($pixel)) {
    @return math.div($pixel, 16) + em;

  } @else {
    @error 'Units are not allowed in convert-to-em function!';

  }
}

@function set-primary-color($color-name) {
  @if not map-has-key(var.$primary-colors, $color-name) {
    @error 'No color named `#{$color-name}` in $primary-colors!  '
      + 'Color should be one of the following: `#{map-keys(var.$primary-colors)}`.';
  }
  @return map-get(var.$primary-colors, $color-name);
}

@function set-neutral-color($color-name) {
  @if not map-has-key(var.$neutral-colors, $color-name) {
    @error 'No color named `#{$color-name}` in $neutral-colors!  '
      + 'Color should be one of the following: `#{map-keys(var.$neutral-colors)}`.';
  }
  @return map-get(var.$neutral-colors, $color-name);
}

@function set-augmented-color($color-name) {
  @if not map-has-key(var.$augmented-colors, $color-name) {
    @error 'No color named `#{$color-name}` in $augmented-colors!  '
      + 'Color should be one of the following: `#{map-keys(var.$augmented-colors)}`.';
  }
  @return map-get(var.$augmented-colors, $color-name);

}

@function set-assigned-color($color-name) {
  @if not map-has-key(var.$assigned-colors, $color-name) {
    @error 'No color named `#{$color-name}` in $assigned-colors!  '
      + 'Color should be one of the following: `#{map-keys(var.$assigned-colors)}`.';
  }
  @return map-get(var.$assigned-colors, $color-name);
}

@function set-font-family($font-name) {
  @if not map-has-key(var.$font-families, $font-name) {
    @error 'No font named `#{$font-name}` in $font-families!  '
      + 'Font name should be one of the following: `#{map-keys(var.$font-families)}`.';
  }
  @return map-get(var.$font-families, $font-name);
}

@function set-font-weight($font-weight) {
  @if not map-has-key(var.$font-weights, $font-weight) {
    @error 'No font weight `#{$font-weight}` defined in $font-weights!  '
      + 'Font weight should be one of the following: `#{map-keys(var.$font-weights)}`.';
  }
  @return map-get(var.$font-weights, $font-weight);
}

@function set-text-size($text-size) {
  @if not map-has-key(var.$text-sizes, $text-size) {
    @error 'No text size `#{$text-size}` defined in $text-sizes!  '
    + 'Text size should be one of the following:  `#{map-keys(var.$text-sizes)}`.';
  }
  @return map-get(var.$text-sizes, $text-size);
}

@function set-timing-function($timing-function-name) {
  @if not map-has-key(var.$timing-functions, $timing-function-name) {
    @error 'No timing-function named `#{$timing-function-name}` in $timing-functions!  '
      + 'Timing-function should be one of the following: `#{map-keys(var.$timing-functions)}`.';
  }
  @return map-get(var.$timing-functions, $timing-function-name);
}

@function set-border-radius($border-radius-name) {
  @if not map-has-key(var.$border-radius, $border-radius-name) {
    @error 'No border-radius named `#{$border-radius-name}` defined in $border-radius! '
     + 'Border-radius-name should be one of the following:  `#{map-keys(var.$border-radius)}`.'
  }
  @return map-get(var.$border-radius, $border-radius-name);
}

@function set-box-shadow-bottom($box-shadow-bottom-name) {
  @if not map-has-key(var.$box-shadow-bottom, $box-shadow-bottom-name) {
    @error 'No box-shadow-bottom named `#{$box-shadow-bottom-name}` defined in $box-shadow-bottom! '
     + 'Box shadow bottom name should be one of the following:  `#{map-keys(var.$box-shadow-bottom)}`.'
  }
  @return map-get(var.$box-shadow-bottom, $box-shadow-bottom-name);
}

@function set-box-shadow-bottom-right($box-shadow-bottom-right-name) {
  @if not map-has-key(var.$box-shadow-bottom-right, $box-shadow-bottom-right-name) {
    @error 'No box-shadow-bottom-right named `#{$box-shadow-bottom-right-name}` defined in $box-shadow-bottom-right! '
     + 'Box-shadow-bottom-right name should be one of the following:  `#{map-keys(var.$box-shadow-bottom-right)}`.'
  }
  @return map-get(var.$box-shadow-bottom-right, $box-shadow-bottom-right-name);
}

@function set-box-shadow-right($box-shadow-right-name) {
  @if not map-has-key(var.$box-shadow-right, $box-shadow-right-name) {
    @error 'No box-shadow-bottom named `#{$box-shadow-right-name}` defined in $box-shadow-bottom! '
     + 'Box shadow bottom name should be one of the following:  `#{map-keys(var.$box-shadow-right)}`.'
  }
  @return map-get(var.$box-shadow-right, $box-shadow-right-name);
}

@function set-font-size($font-size-name) {
  @if not map-has-key(var.$font-sizes, $font-size-name) {
    @error 'No font-size named `#{$font-size-name}` defined in $font-sizes! '
     + 'Font-size name should be one of the following:  `#{map-keys(var.$font-sizes)}`.'
  }
  @return map-get(var.$font-sizes, $font-size-name);
}

@function set-font-size($fluid-font-size-name) {
  @if not map-has-key(var.$fluid-font-sizes, $fluid-font-size-name) {
    @error 'No font-size named `#{$fluid-font-size-name}` defined in $fluid-font-sizes! '
     + 'Fluid-font-size name should be one of the following:  `#{map-keys(var.$fluid-font-sizes)}`.'
  }
  @return map-get(var.$fluid-font-sizes, $fluid-font-size-name);
}

@function set-fluid-space($fluid-space-name) {
  @if not map-has-key(var.$fluid-spaces, $fluid-space-name) {
    @error 'No fluid-space named `#{$fluid-space-name}` defined in $fluid-spaces! '
     + 'Fluid-space name should be one of the following:  `#{map-keys(var.$fluid-spaces)}`.'
  }
  @return map-get(var.$fluid-spaces, $fluid-space-name);
}

@function set-fluid-body-text($fluid-body-text-name) {
  @if not map-has-key(var.$fluid-body-texts, $fluid-body-text-name) {
    @error 'No fluid-body-text named `#{$fluid-body-text-name}` defined in $fluid-body-texts! '
     + 'Fluid-body-text name should be one of the following:  `#{map-keys(var.$fluid-body-texts)}`.'
  }
  @return map-get(var.$fluid-body-texts, $fluid-body-text-name);
}

@function set-fluid-heading-text($fluid-heading-text-name) {
  @if not map-has-key(var.$fluid-heading-texts, $fluid-heading-text-name) {
    @error 'No fluid-heading-text named `#{$fluid-heading-text-name}` defined in $fluid-heading-texts! '
     + 'Fluid-heading-text name should be one of the following:  `#{map-keys(var.$fluid-heading-texts)}`.'
  }
  @return map-get(var.$fluid-heading-texts, $fluid-heading-text-name);
}